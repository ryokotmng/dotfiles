"------------------------------------------------------
" basic
"------------------------------------------------------
" swpファイルなし
set noswapfile
" ウインドウのタイトルバーにファイルのパス情報等を表示する
set title
" カーソルが何行目の何列目に置かれているかを表示する
set ruler
" ステータスラインとタブライン
set laststatus=2
set statusline=%<%f\ %m%r%h%w%{'['.(&fenc!=''?&fenc:&enc).']['.&ff.']'}%=%l,%c%V%8P
set showtabline=2

" 保存されていないファイルがあるときでも別のファイルを開くことが出来る
set hidden
" 行番号を振る
set number
" 内容が変更されたら自動的に再読み込み
set autoread
" クリップボードを共有
if has("mac")
  set clipboard+=unnamed
else
  set clipboard^=unnamedplus
endif

" 自動補完
set completeopt=menuone
for k in split("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_",'\zs')
  exec "imap <expr> " . k . " pumvisible() ? '" . k . "' : '" . k . "\<C-X>\<C-P>\<C-N>'"
endfor

" scrollの際、必ず上下にある行数
set scrolloff=5
" 括弧の対応を見せる設定とその時間（秒）
set showmatch matchtime=1
"補完メニュー(変換候補の出てくるやつ)の高さ
set pumheight=10
" backspace有効
set backspace=indent,eol,start
" Prevent from opening scratch preview
set completeopt=menuone
" ビープ音を鳴らさずエラーメッセージを表示する
set visualbell t_vb=
set noerrorbells

" ウィンドウの分割サイズ変更を1ずつ動くように
let g:winresizer_vert_resize = 1
let g:winresizer_horiz_resize = 1
" 画面分割して定義へ移動
au FileType go nmap <leader>s <Plug>(go-def-split)
au FileType go nmap <leader>v <Plug>(go-def-vertical)

"キーの割当て"
let g:mapleader = "\<Space>"
inoremap <silent> jj <ESC>
nnoremap L $
nnoremap H ^

"------------------------------------------------------
" style
"------------------------------------------------------
" vueファイルのシンタックスハイライト
autocmd BufNewFile,BufRead *.{html,htm,vue*} set filetype=html
" 全角スペースをハイライト
highlight ZenkakuSpace cterm=underline ctermfg=lightblue guibg=white
match ZenkakuSpace /　/

" カーソルラインを表示
set cursorline
" 行番号のみハイライト
if !has('nvim')
    set cursorlineopt=number
endif

"新しい行を開始したときに、新しい行のインデントを現在行と同じ量にする
set autoindent smartindent
"タブを押した時にスペースに変換する
set expandtab
"tabのスペース設定
set tabstop=2 shiftwidth=2 softtabstop=0

"インデントの数を折畳のレベル(深さ)とする
set foldmethod=indent
set foldtext=FoldCCtext()
set t_Co=256

"80カラムルール
let &colorcolumn=join(range(81,999),",")
hi ColorColumn ctermbg=235 guibg=#2c2d27

" ファイル保存時に整形
let s:format_targets = {
      \ 'javascript': '--use-tabs=false --single-quote=true %',
      \ 'html': '--use-tabs=false --single-quote=true %',
      \ 'json': '--tab',
      \ 'vue':  '--use-tabs=false --single-quote=true %',
      \ }
let g:ale_fix_on_save = 1

" 行末の空白削除
let s:spaces_target_ft = {
      \ 'markdown': 0,
      \ 'go': 1,
      \ 'javascript': 1,
      \ 'graphql': 1,
      \ 'terminal': 1,
      \ }

" go用
let g:go_highlight_array_whitespace_error = 1
let g:go_highlight_chan_whitespace_error = 1
let g:go_highlight_extra_types = 1
let g:go_highlight_space_tab_error = 1
let g:go_highlight_trailing_whitespace_error = 1
let g:go_highlight_operators = 1
let g:go_highlight_functions = 1
let g:go_highlight_function_arguments = 1
let g:go_highlight_function_calls = 1
let g:go_highlight_fields = 1
let g:go_highlight_types = 1
let g:go_highlight_build_constraints = 1
let g:go_highlight_generate_tags = 1
let g:go_highlight_variable_assignments = 1
let g:go_highlight_variable_declarations = 1

"------------------------------------------------------
"search
"------------------------------------------------------
set ignorecase
set smartcase
set wrapscan
set hlsearch
nnoremap <Esc><Esc> :nohlsearch<CR><ESC>
" 検索ワードの最初の文字を入力した時点で検索を開始する
set incsearch

"------------------------------------------------------
" other
"------------------------------------------------------
" オートコンプリート用テンプレート
let g:sonictemplate_vim_template_dir = expand('~/dotfiles/vim/sonictemplate')
imap <silent> <C-l> <plug>(sonictemplate-postfix)

" coc.vim用
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" neoterm
let g:neoterm_default_mod='belowright'
let g:neoterm_size=20
let g:neoterm_autoscroll=1
tnoremap <silent> <C-w> <C-\><C-n><C-w>
nnoremap <silent> <C-n> :TREPLSendLine<CR>j0
vnoremap <silent> <C-n> V:TREPLSendSelection<CR>'>j0

" キーバインド
" Git
nnoremap <leader>gs :Gstatus<CR>
nnoremap <leader>gd :Gdiff<CR>
nnoremap <leader>gl :Glog<CR>
nnoremap <leader>gb :Gblame<CR>
nnoremap <leader>git :T lazygit<CR><C-w>ja

" ファイルの保存と修了
nnoremap <Leader>w :w<CR>
nnoremap <Leader>q :q!<CR>

" タブ
nnoremap <leader>tab :Tnew<CR><C-w>ja
nnoremap (keymapping) :T (command)<CR>
nnoremap (keymapping) :T (command)<CR><C-w>h

" タブ移動
nnoremap <leader>s <Nop>
nnoremap <leader>sj <C-w>j
nnoremap <leader>sk <C-w>k
nnoremap <leader>sl <C-w>l
nnoremap <leader>sh <C-w>h
nnoremap <leader>sJ <C-w>J
nnoremap <leader>sK <C-w>K
nnoremap <leader>sL <C-w>L
nnoremap <leader>sH <C-w>H
nnoremap <leader>sn gt
nnoremap <leader>sp gT
nnoremap <leader>sr <C-w>r
nnoremap <leader>s= <C-w>=
nnoremap <leader>sw <C-w>w
nnoremap <leader>so <C-w>_<C-w>|
nnoremap <leader>sO <C-w>=
nnoremap <leader>sN :<C-u>bn<CR>
nnoremap <leader>sP :<C-u>bp<CR>
nnoremap <leader>st :<C-u>tabnew<CR>
nnoremap <leader>sT :<C-u>Unite tab<CR>
nnoremap <leader>ss :<C-u>sp<CR>
nnoremap <leader>sv :<C-u>vs<CR>
nnoremap <leader>sq :<C-u>q<CR>
nnoremap <leader>sQ :<C-u>bd<CR>

" 置換
nnoremap <Leader>re :%s;\<<C-R><C-W>\>;g<Left><Left>;

" grepした結果をquickfixに表示する
au QuickfixCmdPost make,grep,grepadd,vimgrep copen

" vimrcを操作
nnoremap <Leader>. :new ~/.vimrc<CR>
nnoremap <Leader>ss :source ~/.vimrc<CR>

" fzf
" ファイル一覧を出すときにプレビュー表示
command! -bang -nargs=? -complete=dir Files
            \ call fzf#vim#files(<q-args>, fzf#vim#with_preview(), <bang>0)
nnoremap <C-y> :Files<CR>

" ステータスラインにコマンドの候補を表示
set wildmenu

"------------------------------------------------------
"dein
"------------------------------------------------------
if &compatible
 set nocompatible
endif
" Add the dein installation directory into runtimepath
set runtimepath+=~/.cache/dein/repos/github.com/Shougo/dein.vim

if dein#load_state('~/.cache/dein')
 call dein#begin('~/.cache/dein')

 call dein#add('~/.cache/dein')
 call dein#add('Shougo/neco-vim')
 " ファイルを開けるのを便利に
 call dein#add('Shougo/unite.vim')
 " vim内で定義元にジャンプする
 call dein#add('szw/vim-tags')
 call dein#add('fatih/vim-go', {'do': ':GoInstallBinaries'})
 call dein#add('soramugi/auto-ctags.vim')
 let g:auto_ctags = 1
 let g:auto_ctags_directory_list = ['.git']
 set tags+=.git/tags
 " マークアップ用
 call dein#add('mattn/emmet-vim')
 call dein#add('tell-k/vim-browsereload-mac')
 " 表を簡単に作る
 call dein#add('dhruvasagar/vim-table-mode')
 let g:table_mode_corner = '|'
 " 空白をハイライト
 call dein#add('bronson/vim-trailing-whitespace')
 " Syntaxハイライト
 call dein#add('digitaltoad/vim-pug')
 call dein#add('leafgarland/typescript-vim')
 call dein#add('godlygeek/tabular')
 call dein#add('plasticboy/vim-markdown')
 call dein#add('suan/vim-instant-markdown')
 call dein#add('slim-template/vim-slim')
 call dein#add('simeji/winresizer')
 call dein#add('hashivim/vim-terraform')
 " オートコンプリート
 call dein#add('neoclide/coc.nvim', {'build': './install.sh nightly', 'branch': 'release'})
 call dein#add('junegunn/fzf', {'build': './install --all'})
 call dein#add('junegunn/fzf.vim')
 call dein#add('mattn/sonictemplate-vim')
 call dein#add('tpope/vim-endwise')
 call dein#add('Townk/vim-autoclose')
 " rubocop
 call dein#add('w0rp/ale')
 " その他
 call dein#add('scrooloose/nerdtree')
 call dein#add('Shougo/neosnippet.vim')
 call dein#add('Shougo/neosnippet-snippets')
 call dein#add('kassio/neoterm')
 call dein#add('airblade/vim-gitgutter')

 if !has('nvim')
   call dein#add('roxma/nvim-yarp')
   call dein#add('roxma/vim-hug-neovim-rpc')
 endif

 call dein#end()
 call dein#save_state()
endif

"未インストールのものがあったら自動的にインストール
if dein#check_install()
  call dein#install()
endif

"------------------------------------------------------
"NERDTree
"------------------------------------------------------
" ファイルが指定された場合は非表示にし、指定なしの場合は表示する
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
" キーバインド
map <C-n> :NERDTreeToggle<CR>
" NERDTree File highlighting
function! NERDTreeHighlightFile(extension, fg, bg, guifg, guibg)
 exec 'autocmd filetype nerdtree highlight ' . a:extension .' ctermbg='. a:bg .' ctermfg='. a:fg .' guibg='. a:guibg .' guifg='. a:guifg
 exec 'autocmd filetype nerdtree syn match ' . a:extension .' #^\s\+.*'. a:extension .'$#'
endfunction
call NERDTreeHighlightFile('py',     'yellow',  'none', 'yellow',  '#151515')
call NERDTreeHighlightFile('md',     'blue',    'none', '#3366FF', '#151515')
call NERDTreeHighlightFile('yml',    'yellow',  'none', 'yellow',  '#151515')
call NERDTreeHighlightFile('config', 'yellow',  'none', 'yellow',  '#151515')
call NERDTreeHighlightFile('conf',   'yellow',  'none', 'yellow',  '#151515')
call NERDTreeHighlightFile('json',   'yellow',  'none', 'yellow',  '#151515')
call NERDTreeHighlightFile('html',   'yellow',  'none', 'yellow',  '#151515')
call NERDTreeHighlightFile('styl',   'cyan',    'none', 'cyan',    '#151515')
call NERDTreeHighlightFile('css',    'cyan',    'none', 'cyan',    '#151515')
call NERDTreeHighlightFile('rb',     'Red',     'none', 'red',     '#151515')
call NERDTreeHighlightFile('js',     'Red',     'none', '#ffa500', '#151515')
call NERDTreeHighlightFile('php',    'Magenta', 'none', '#ff00ff', '#151515')

filetype plugin indent on
syntax enable
colorscheme iceberg
