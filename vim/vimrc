"------------------------------------------------------
" basic
"------------------------------------------------------
" swpファイルなし
set noswapfile
" ウインドウのタイトルバーにファイルのパス情報等を表示する
set title
" 行番号を表示
set number
" ステータスラインとタブライン
set laststatus=2
set statusline=%<%f\ %m%r%h%w%{'['.(&fenc!=''?&fenc:&enc).']['.&ff.']'}%=%l,%c%V%8P
set showtabline=2
" 保存されていないファイルがあるときでも別のファイルを開くことが出来る
set hidden
" 内容が変更されたら自動的に再読み込み
set autoread
" 自動補完
set completeopt=menuone
for k in split("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_",'\zs')
  exec "imap <expr> " . k . " pumvisible() ? '" . k . "' : '" . k . "\<C-X>\<C-P>\<C-N>'"
endfor
" 括弧の対応を見せる設定とその時間（秒）
set showmatch matchtime=1
"補完メニュー(変換候補の出てくるやつ)の高さ
set pumheight=10
" Prevent from opening scratch preview
set completeopt=menuone
" ビープ音を鳴らさずエラーメッセージを表示する
set visualbell t_vb=
set noerrorbells
" ウィンドウの分割サイズ変更を1ずつ動くように
let g:winresizer_vert_resize = 1
let g:winresizer_horiz_resize = 1

"------------------------------------------------------
"dein
"------------------------------------------------------
if &compatible
  set nocompatible               " Be iMproved
endif

let $CACHE = expand('~/.cache')
if !isdirectory($CACHE)
  call mkdir($CACHE, 'p')
endif
if &runtimepath !~# '/dein.vim'
  let s:dein_dir = fnamemodify('dein.vim', ':p')
  if !isdirectory(s:dein_dir)
    let s:dein_dir = $CACHE .. '/dein/repos/github.com/Shougo/dein.vim'
    if !isdirectory(s:dein_dir)
      execute '!git clone https://github.com/Shougo/dein.vim' s:dein_dir
    endif
  endif
  execute 'set runtimepath^=' .. substitute(
        \ fnamemodify(s:dein_dir, ':p') , '[/\\]$', '', '')
endif

set runtimepath+=$HOME/.vim/dein/repos/github.com/Shougo/dein.vim   "★ 新パスに書き換え
let s:dein_dir = expand($HOME . '/.vim/dein')   "★ 追記

" Required:
call dein#begin(s:dein_dir)   "★ 新パスに書き換え

" Let dein manage dein
" Required:
call dein#add(s:dein_dir . '/repos/github.com/Shougo/dein.vim')   "★ 新パスに書き換え

" LoadTomlFile:
let s:toml = s:dein_dir . '/dein.toml'
call dein#load_toml(s:toml, {'lazy': 0})

" Required:
call dein#end()

" Required:
filetype plugin indent on
syntax enable
" syntax on

" If you want to install not installed plugins on startup.
if dein#check_install()
  call dein#install()
endif

" neovim ----------
let g:python_host_prog=$PYENV_ROOT.'/versions/neovim-2/bin/python'
let g:python3_host_prog=$PYENV_ROOT.'/versions/neovim-3/bin/python'

"------------------------------------------------------
" キーバインド
"------------------------------------------------------
let g:mapleader = "\<Space>"
inoremap <silent> jj <ESC>
nnoremap L $
nnoremap H ^
noremap x "_x

" ファイルの保存と修了
nnoremap <Leader>w :w<CR>
nnoremap <Leader>q :q!<CR>

" ターミナル機能
nnoremap <leader>term :terminal<CR>a
nnoremap <leader>sterm :sbuffer<CR><Enter><CR>:terminal<CR>a
nnoremap <leader>vterm :vert sb<CR><Enter><CR>:terminal<CR>a

" バッファ移動
nnoremap <silent> <C-j> :bprev<CR>
nnoremap <silent> <C-k> :bnext<CR>

" タブ移動
nnoremap <leader>s <Nop>
nnoremap <leader>sj <C-w>j
nnoremap <leader>sk <C-w>k
nnoremap <leader>sl <C-w>l
nnoremap <leader>sh <C-w>h
nnoremap <leader>sJ <C-w>J
nnoremap <leader>sK <C-w>K
nnoremap <leader>sL <C-w>L
nnoremap <leader>sH <C-w>H
nnoremap <leader>sn gt
nnoremap <leader>sp gT
nnoremap <leader>sr <C-w>r
nnoremap <leader>s= <C-w>=
nnoremap <leader>sw <C-w>w
nnoremap <leader>so <C-w>_<C-w>|
nnoremap <leader>sO <C-w>=
nnoremap <leader>sN :<C-u>bn<CR>
nnoremap <leader>sP :<C-u>bp<CR>
nnoremap <leader>st :<C-u>tabnew<CR>
nnoremap <leader>sT :<C-u>Unite tab<CR>
nnoremap <leader>ss :<C-u>sp<CR>
nnoremap <leader>sv :<C-u>vs<CR>
nnoremap <leader>sq :<C-u>q<CR>
nnoremap <leader>sQ :<C-u>bd<CR>

" vimgrep
nnoremap [q :cprevious<CR>   " 前へ
nnoremap ]q :cnext<CR>       " 次へ
nnoremap [Q :<C-u>cfirst<CR> " 最初へ
nnoremap ]Q :<C-u>clast<CR>  " 最後へ

" 置換
nnoremap <Leader>re :%s;\<<C-R><C-W>\>;g<Left><Left>;

" grepした結果をquickfixに表示する
" au QuickfixCmdPost make,grep,grepadd,vimgrep copen

" vimrcを操作
nnoremap <Leader>. :new ~/.vimrc<CR>
nnoremap <Leader>vimrc :source ~/.vimrc<CR>

" denite
autocmd FileType denite call s:denite_my_settings()
function! s:denite_my_settings() abort
  nnoremap <silent><buffer><expr> <CR>
  \ denite#do_map('do_action')
  nnoremap <silent><buffer><expr> d
  \ denite#do_map('do_action', 'delete')
  nnoremap <silent><buffer><expr> p
  \ denite#do_map('do_action', 'preview')
  nnoremap <silent><buffer><expr> q
  \ denite#do_map('quit')
  nnoremap <silent><buffer><expr> i
  \ denite#do_map('open_filter_buffer')
  nnoremap <silent><buffer><expr> <Space>
  \ denite#do_map('toggle_select').'j'
endfunction

" EasyMotion
map <Leader> <Plug>(easymotion-prefix)
map <Leader> <Plug>(easymotion-prefix)
let g:EasyMotion_do_mapping = 0 " Disable default mappings

" Jump to anywhere you want with minimal keystrokes, with just one key binding.
" `s{char}{label}`
" nmap s <Plug>(easymotion-overwin-f)
" or
" `s{char}{char}{label}`
" Need one more keystroke, but on average, it may be more comfortable.
nmap s <Plug>(easymotion-overwin-f2)
" Turn on case insensitive feature
let g:EasyMotion_smartcase = 1
" JK motions: Line motions
map <Leader>j <Plug>(easymotion-j)
map <Leader>k <Plug>(easymotion-k)

" tig
nnoremap <Leader>t :TigOpenProjectRootDir<CR>
" 現在のファイルの履歴を見る
nnoremap <Leader>T :TigOpenCurrentFile<CR>
" パターンでtig grepする
nnoremap <Leader>g :TigGrep<CR>
" tig grepした内容を再呼び出しする
nnoremap <Leader>r :TigGrepResume<CR>
" 選択中のキーワードでtig grepする
vnoremap <Leader>g y:TigGrep<Space><C-R>"<CR>
" カーソル下のキーワードでtig grepする
nnoremap <Leader>cg :<C-u>:TigGrep<Space><C-R><C-W><CR>
" 現在のカーソル位置でtig blameする
nnoremap <Leader>b :TigBlame<CR>

" defx
autocmd FileType defx call s:defx_my_settings()
nnoremap <silent> <Leader>f :<C-u> Defx <CR>
function! s:defx_my_settings() abort
  nnoremap <silent><buffer><expr> <CR>
   \ defx#do_action('drop')
  nnoremap <silent><buffer><expr> c
  \ defx#do_action('copy')
  nnoremap <silent><buffer><expr> m
  \ defx#do_action('move')
  nnoremap <silent><buffer><expr> p
  \ defx#do_action('paste')
  nnoremap <silent><buffer><expr> l
  \ defx#do_action('drop')
  nnoremap <silent><buffer><expr> t
  \ defx#do_action('open','tabnew')
  nnoremap <silent><buffer><expr> E
  \ defx#do_action('drop', 'vsplit')
  nnoremap <silent><buffer><expr> P
  \ defx#do_action('drop', 'pedit')
  nnoremap <silent><buffer><expr> o
  \ defx#do_action('open_or_close_tree')
  nnoremap <silent><buffer><expr> K
  \ defx#do_action('new_directory')
  nnoremap <silent><buffer><expr> N
  \ defx#do_action('new_file')
  nnoremap <silent><buffer><expr> M
  \ defx#do_action('new_multiple_files')
  nnoremap <silent><buffer><expr> C
  \ defx#do_action('toggle_columns',
  \                'mark:indent:icon:filename:type:size:time')
  nnoremap <silent><buffer><expr> S
  \ defx#do_action('toggle_sort', 'time')
  nnoremap <silent><buffer><expr> d
  \ defx#do_action('remove')
  nnoremap <silent><buffer><expr> r
  \ defx#do_action('rename')
  nnoremap <silent><buffer><expr> !
  \ defx#do_action('execute_command')
  nnoremap <silent><buffer><expr> x
  \ defx#do_action('execute_system')
  nnoremap <silent><buffer><expr> yy
  \ defx#do_action('yank_path')
  nnoremap <silent><buffer><expr> .
  \ defx#do_action('toggle_ignored_files')
  nnoremap <silent><buffer><expr> ;
  \ defx#do_action('repeat')
  nnoremap <silent><buffer><expr> h
  \ defx#do_action('cd', ['..'])
  nnoremap <silent><buffer><expr> ~
  \ defx#do_action('cd')
  nnoremap <silent><buffer><expr> q
  \ defx#do_action('quit')
  nnoremap <silent><buffer><expr> <Space>
  \ defx#do_action('toggle_select') . 'j'
  nnoremap <silent><buffer><expr> *
  \ defx#do_action('toggle_select_all')
  nnoremap <silent><buffer><expr> j
  \ line('.') == line('$') ? 'gg' : 'j'
  nnoremap <silent><buffer><expr> k
  \ line('.') == 1 ? 'G' : 'k'
  nnoremap <silent><buffer><expr> <C-l>
  \ defx#do_action('redraw')
  nnoremap <silent><buffer><expr> <C-g>
  \ defx#do_action('print')
  nnoremap <silent><buffer><expr> cd
  \ defx#do_action('change_vim_cwd')
endfunction
call defx#custom#option('_', {
  \ 'winwidth': 40,
  \ 'split': 'vertical',
  \ 'direction': 'topleft',
  \ 'show_ignored_files': 1,
  \ 'buffer_name': 'exproler',
  \ 'toggle': 1,
  \ 'resume': 1,
  \ 'columns': 'indent:git:icons:filename:mark',
  \ })
call defx#custom#column('git', 'indicators', {
  \ 'Modified'  : '✹',
  \ 'Staged'    : '✚',
  \ 'Untracked' : '✭',
  \ 'Renamed'   : '➜',
  \ 'Unmerged'  : '═',
  \ 'Ignored'   : '☒',
  \ 'Deleted'   : '✖',
  \ 'Unknown'   : '?'
  \ })
autocmd BufWritePost * call defx#redraw()
autocmd BufEnter * call defx#redraw()

" fzf
nnoremap <leader>file :Files<CR>
nnoremap <leader>gst :GFiles?<CR>
nnoremap <leader>com :Commands<CR>
nnoremap <leader>map :Maps<CR>
nnoremap <silent>fzf :Files<CR>
nnoremap <silent>ls :Buffers<CR>
nnoremap <Leader>k :bd<CR>

" ファイル一覧を出すときにプレビュー表示
command! -bang -nargs=? -complete=dir Files
            \ call fzf#vim#files(<q-args>, fzf#vim#with_preview(), <bang>0)
command! FZFMru call fzf#run({
\  'source':  v:oldfiles,
\  'sink':    'e',
\  'options': '-m -x +s',
\  'down':    '40%'})
" fzf
set rtp+=/usr/local/opt/fzf

function! s:find_git_root()
  return system('git rev-parse --show-toplevel 2> /dev/null')[:-2]
endfunction

command! ProjectFiles execute 'Files' s:find_git_root()

command! -bang -nargs=* Pt
  \ call fzf#vim#grep(
  \   'pt --column --ignore=.git --global-gitignore '.shellescape(<q-args>), 1,
  \   <bang>0 ? fzf#vim#with_preview('up:60%')
  \           : fzf#vim#with_preview({ 'dir': s:find_git_root() }),
  \   <bang>0)

" coc.vim
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
" カーソル下にある単語を検索
nnoremap <silent> <leader>ag :Ag <C-R><C-W><CR>
nnoremap <silent> <leader>AG :Ag <C-R><C-A><CR>
" visual modeで選択したwordを検索
xnoremap <silent> <leader>ag  y:Ag <C-R>"<CR>
nnoremap <silent> <leader>cag :Ag <CR>
nnoremap <silent> <leader>crg :Rg <CR>

nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

"------------------------------------------------------
" style
"------------------------------------------------------
" カーソルラインを表示
set cursorline
"新しい行を開始したときに、新しい行のインデントを現在行と同じ量にする
set autoindent smartindent
"タブを押した時にスペースに変換する
set expandtab
" 全角スペースをハイライト
highlight ZenkakuSpace cterm=underline ctermfg=lightblue guibg=white
match ZenkakuSpace /　/
"tabのスペース設定
set tabstop=2 shiftwidth=2 softtabstop=0
" 行番号をハイライト
if !has('nvim')
    set cursorlineopt=number
endif

"インデントの数を折畳のレベル(深さ)とする
set foldmethod=indent
set foldtext=FoldCCtext()

"80カラムルール
let &colorcolumn=join(range(81,999),",")
hi ColorColumn ctermbg=235 guibg=#2c2d27

" ファイル保存時に整形
let s:format_targets = {
      \ 'javascript': '--use-tabs=false --single-quote=true %',
      \ 'html': '--use-tabs=false --single-quote=true %',
      \ 'json': '--tab',
      \ 'vue':  '--use-tabs=false --single-quote=true %',
      \ }
let g:ale_fix_on_save = 1

" 行末の空白削除
let s:spaces_target_ft = {
      \ 'markdown': 0,
      \ 'go': 1,
      \ 'javascript': 1,
      \ 'graphql': 1,
      \ 'terminal': 1,
      \ }

" vueファイルのシンタックスハイライト
autocmd BufNewFile,BufRead *.{html,htm,vue*} set filetype=html

"------------------------------------------------------
"search
"------------------------------------------------------
set ignorecase
set smartcase
set wrapscan
set hlsearch
nnoremap <Esc><Esc> :nohlsearch<CR><ESC>
" 検索ワードの最初の文字を入力した時点で検索を開始する
set incsearch

"------------------------------------------------------
" other
"------------------------------------------------------
" オートコンプリート用テンプレート
let g:sonictemplate_vim_template_dir = expand('~/dotfiles/vim/sonictemplate')
imap <silent> <C-l> <plug>(sonictemplate-postfix)

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" ステータスラインにコマンドの候補を表示
set wildmenu

"------------------------------------------------------
" Golang用の設定
"------------------------------------------------------
let g:go_highlight_extra_types = 1
let g:go_highlight_space_tab_error = 1
let g:go_highlight_operators = 1
let g:go_highlight_functions = 1
let g:go_highlight_function_arguments = 1
let g:go_highlight_function_calls = 1
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1
let g:go_highlight_fields = 1
let g:go_highlight_types = 1
let g:go_highlight_build_constraints = 1
let g:go_highlight_generate_tags = 1
let g:go_highlight_variable_assignments = 1
let g:go_highlight_variable_declarations = 1
let g:go_fmt_command = "goimports"
let g:go_fmt_autosave = 1
" let g:go_gopls_enabled = 0

"------------------------------------------------------
" 色の設定
"------------------------------------------------------
colorscheme iceberg
" 色の設定
set t_Co=256
" コメントはハイライトしない
hi Comment ctermbg=232
" 選択行をハイライト
hi cursorline term=reverse cterm=none ctermbg=240
" goで'if erro != nil'をコメントと同じ色にする
syn match goExtIfErr "\v^\s*if\s+err\s*\!\=\s*nil\s*\{\s*\_$\_.\s*return.+\_$\_.\s*\}" fold
hi def link goExtIfErr Comment
hi goExtIfErr  ctermfg=darkGray
